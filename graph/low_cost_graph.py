# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kG1Ffo7p_wUw-sOEPfMoPHW4YRzhmeWW
"""

def parse(net: str) -> list:
  mat = []
  lines = net.split("\n")
  for line in lines:
    a = line.split(" ")
    row = []
    for e in a:
        row.append(int(e))
    mat.append(row)
  return mat

def neighbors(graph):
  nei = {}
  for i in range(len(graph)):
    nei[str(i)] = []
    for j in range(len(graph[i])):
      if graph[i][j] != 0:
        nei[str(i)].append(j)
  return nei

def prim_mst(graph):
    n = len(graph)
    parent = [-1] * n
    key = [float('inf')] * n
    mst_set = [False] * n

    key[0] = 0
    parent[0] = -1

    for _ in range(n - 1):
        u = min_key(key, mst_set)
        mst_set[u] = True

        for v in range(n):
            if 0 < graph[u][v] < key[v] and not mst_set[v]:
                parent[v] = u
                key[v] = graph[u][v]

    return parent

def min_key(key, mst_set):
    min_val = float('inf')
    min_index = -1
    for v in range(len(key)):
        if key[v] < min_val and not mst_set[v]:
            min_val = key[v]
            min_index = v
    return min_index

def path_len(graph, parent):
    total_cost = 0
    for v in range(1, len(parent)):
        if parent[v] != -1:
            total_cost += graph[v][parent[v]]
    return total_cost

def maximum_saving(input_network: str) -> int:
    graph = parse(input_network)
    mst_parent = prim_mst(graph)

    total_original_cost = sum(sum(row) for row in graph) // 2
    print(total_original_cost)
    total_mst_cost = path_len(graph, mst_parent)
    max_saving = total_original_cost - total_mst_cost

    return max_saving

net = '''0 14 10 19 0 0 0
14 0 0 15 18 0 0
10 0 0 26 0 29 0
19 15 26 0 16 17 21
0 18 0 16 0 0 9
0 0 29 17 0 0 25
0 0 0 21 9 25 0'''


max_saving = maximum_saving(net)
print(max_saving)

# 0 -> 15